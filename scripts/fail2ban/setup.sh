#!/usr/bin/env bash
set -euo pipefail

# Configura√ß√µes do Jail NGINX e desativa SSHD no Fail2Ban
echo "üõ°Ô∏è  Configurando Fail2Ban para NGINX req-limit..."

# Garante que os diret√≥rios existem
mkdir -p /etc/fail2ban/jail.d /etc/fail2ban/filter.d

# Cria o jail customizado para limitar requisi√ß√µes NGINX
cat > /etc/fail2ban/jail.d/nginx-custom.conf <<'EOF'
[nginx-req-limit]
enabled = true
filter = nginx-req-limit
action = iptables-multiport[name=ReqLimit, port="http,https", protocol=tcp]
logpath = /var/log/nginx/*error.log
findtime = 600
bantime = 7200
maxretry = 10
EOF

# Cria o filtro correspondente
cat > /etc/fail2ban/filter.d/nginx-req-limit.conf <<'EOF'
[Definition]
failregex = limiting requests.*client: <HOST>
ignoreregex =
EOF

# Desativa o jail padr√£o de SSHD para evitar erro de log ausente
cat > /etc/fail2ban/jail.d/disable-sshd.conf <<'EOF'
[sshd]
enabled = false
EOF

# Garante que o servi√ßo Fail2Ban esteja em execu√ß√£o
if command -v fail2ban-client >/dev/null 2>&1; then
    echo "‚û§ Iniciando ou verificando status do Fail2Ban..."
    fail2ban-client start 2>/dev/null || true
fi

# Recarrega as configura√ß√µes do Fail2Ban de forma compat√≠vel
if command -v fail2ban-client >/dev/null 2>&1; then
    echo "‚û§ Recarregando Fail2Ban via client..."
    fail2ban-client reload || true
elif command -v service >/dev/null 2>&1; then
    echo "‚û§ Reiniciando Fail2Ban via service..."
    service fail2ban restart || true
else
    echo "‚ÑπÔ∏è Nenhum gerenciador de servi√ßo detectado. Reinicie o Fail2Ban manualmente."
fi

echo "‚úÖ Fail2Ban configurado e reiniciado!"
