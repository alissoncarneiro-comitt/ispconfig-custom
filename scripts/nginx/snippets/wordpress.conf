root {DOCROOT};
index index.php index.html index.htm;

location / {
    try_files $uri $uri/ /index.php?$args;
}

# Segurança: nega acesso a arquivos sensíveis
location ~* /(\.htaccess|\.git|\.env|composer\.(json|lock)) {
    deny all;
}

# Compatível com verificações de domínio
location ^~ /.well-known/acme-challenge/ {
    allow all;
    root {DOCROOT};
}

# Compatível com XML-RPC (caso usado por Jetpack)
location = /xmlrpc.php {
    allow all;
    include snippets/fastcgi-php.conf;
    fastcgi_pass unix:/run/php/php{PHP_VERSION}-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}

# Processamento de PHP
location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    include snippets/security-headers.conf;
    include snippets/ssl-params.conf;
    fastcgi_pass unix:/run/php/php{PHP_VERSION}-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;

    fastcgi_cache FASTCGI_CACHE;
    fastcgi_cache_valid 200 301 302 1h;
    fastcgi_cache_use_stale error timeout invalid_header updating http_500;
    add_header X-FastCGI-Cache $upstream_cache_status;
}

# Arquivos estáticos (cache longo)
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot|otf)$ {
    expires 30d;
    access_log off;
    add_header Cache-Control "public, immutable";
}

# Cache purge
location = /purge {
    allow 127.0.0.1;
    deny all;
    if ($request_method = PURGE) {
        fastcgi_cache_purge FASTCGI_CACHE "$scheme$request_method$host$uri";
        return 200 'Purged';
    }
}

# Status do NGINX
location = /nginx_status {
    stub_status on;
    allow 127.0.0.1;
    deny all;
}

# Segurança adicional
location ~ /\. {
    deny all;
}
